meta {
  title: "QC Styles For Dwarf Team";
  description: "Highlights features that were created/modified by users";
  watch-modified: true;
  version: "1.5";
  icon: "http://uncrate.com/p/2016/02/smart-kart.jpg";
  min-josm-version: "15289"; /* This style uses groups for settings */
}
/* Notes

1.2 updates made to usernames

1.3 Added Kaart users -- Aaron -- 12/14/2016

1.4 Added new way & node styles -- Louis -- 3/20/2019

1.5 Alphabetized users, added new users, added tips, simplified node highlight & node modified overlays -- Louis,Ian,AndrewP -- 5/15/2019

Tips:

A setting should be created for each separate user:

setting::user_aaron {
  type: boolean;
  label: tr("Turn User Aaron On/Off");
  default: false;
}

-- after :: comes your setting "class" which can be named as you will. Our example show user_aaron
-- Type: boolean; should always exist
-- label: tr("Anything you want to put here") -> This is what shows up under setting in JOSM
-- Default: false -> the setting will remain disabled on launch until a user enables it

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


at which point, it becomes necessary to create a selector statement for your user:

*[osm_user_name() == "vespax"][setting("user_aaron")] {
  set .aaron;
}

-- * denotes what you are selecting, in this case, every element type in OSM
-- [osm_user_name() == "vespax"] -> this is necessary and should be constructed as such.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In order to construct time stamps, you can use the following:


String: "[eval(JOSM_search("timestamp:2016-02-20/"))]" can be modified in several ways
"timestamp:2016-02-20/" -- Shows all edits edited after date
"timestamp:2016-02-20/2016-02-22" -- Shows all edits after 02-20 but before 02-22
"timestamp:2016-02/ Day and Month can be removed to widen the range of edits shown, example here shows all edits starting in FEB2016.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

So, a timestamped search would look like this:

*[osm_user_name() == "IndianaJones737"))][eval(JOSM_search("timestamp:2016-03-14/2016-03-15"] {
  casing-width: 10;
  casing-color: green;
  casing-opacity: 0.2;
}

-- set .aaron; -> this is setting the class for this statement. This allows us to call it out later on. Classes
can be set like that or as so -> set aaron;

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

way.aaron, & node.aaron,

-- This shows that we are looking for all ways/nodes which meet the "aaron" class. The comma here denotes
that there is another selector we would like to call out after "aaron"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


{
  z-index: -10;
  casing-color: lime;
  casing-width: 10;
  casing-opacity: 0.3;


}

-- This is our code block which will style up whatever we called out as a selector

*/

/* Create Settings */

/* User Settings */

/* Brazil Team */
settings::brazil {
  label: tr("Brazil");
}

setting::user_andrewp {
  type: boolean;
  label: tr("Turn User G_Fyyar On/Off");
  default: true;
  group: "brazil";
}

setting::user_andrews {
  type: boolean;
  label: tr("Turn User Plutocrats On/Off");
  default: true;
  group: "brazil";
}

setting::user_angie {
  type: boolean;
  label: tr("Turn User Inigo_Maptoya On/Off");
  default: true;
  group: "brazil";
}

setting::user_anita {
  type: boolean;
  label: tr("Turn User natureandchill On/Off");
  default: true;
  group: "brazil";
}

setting::user_anja {
  type: boolean;
  label: tr("Turn User Ajaie On/Off");
  default: true;
  group: "brazil";
}

setting::user_callista {
  type: boolean;
  label: tr("Turn User camapsta On/Off");
  default: true;
  group: "brazil";
}

setting::user_christian {
  type: boolean;
  label: tr("Turn User Co2013 On/Off");
  default: true;
  group: "brazil";
}

setting::user_daniel {
  type: boolean;
  label: tr("Turn User The_Intern On/Off");
  default: true;
  group: "brazil";
}

setting::user_farris {
  type: boolean;
  label: tr("Turn User FarieBerrie On/Off");
  default: true;
  group: "brazil";
}

setting::user_johnny {
  type: boolean;
  label: tr("Turn User spititout On/Off");
  default: true;
  group: "brazil";
}

setting::user_joseph {
  type: boolean;
  label: tr("Turn User Szekha On/Off");
  default: true;
  group: "brazil";
}

setting::user_logan {
  type: boolean;
  label: tr("Turn User 127logs On/Off");
  default: true;
  group: "brazil";
}

setting::user_luis {
  type: boolean;
  label: tr("Turn User medrano93 On/Off");
  default: true;
  group: "brazil";
}

setting::user_marshall {
  type: boolean;
  label: tr("Turn User MTG5093 On/Off");
  default: true;
  group: "brazil";
}

setting::user_nickm {
  type: boolean;
  label: tr("Turn User nickmettauer On/Off");
  default: true;
  group: "brazil";
}

setting::user_rd {
  type: boolean;
  label: tr("Turn User mr_et On/Off");
  default: true;
  group: "brazil";
}

setting::user_riley {
  type: boolean;
  label: tr("Turn User AlwaysSunnyInMapadelphia On/Off");
  default: true;
  group: "brazil";
}

setting::user_robert {
  type: boolean;
  label: tr("Turn User Bravesfan On/Off");
  default: true;
  group: "brazil";
}

setting::user_ryanf {
  type: boolean;
  label: tr("Turn User rytheking On/Off");
  default: true;
  group: "brazil";
}

setting::user_ryanf2 { /* Ryan F had a second account when he first started */
  type: boolean;
  label: tr("Turn User rytheking2 On/Off");
  default: true;
  group: "brazil";
}

setting::user_sage {
  type: boolean;
  label: tr("Turn User BobGod On/Off");
  default: true;
  group: "brazil";
}

setting::user_sarena {
  type: boolean;
  label: tr("Turn User swells5 On/Off");
  default: true;
  group: "brazil";
}

setting::user_SherryM {
  type:boolean;
  label:tr("Turn User Sherbare On/Off");
  default: true;
  group: "brazil";
}

setting::user_sierra {
  type:boolean;
  label:tr("Turn User sierrae-kaart On/Off");
  default: true;
  group: "brazil";
}

setting::user_tanner {
  type:boolean;
  label:tr("Turn User 3636pacers On/Off");
  default: true;
  group: "brazil";
}

/* Tracking Selectors -- Way and node style BEFORE they are uploaded */

node:modified::modified_layer {
    symbol-shape: circle;
    symbol-size: 22;
    symbol-stroke-color: orange;
    symbol-stroke-width: 3px;
    symbol-fill-opacity: 0.5;
    z-index: -5;
}

way:modified::modified_layer,
node:modified < way::modified_layer {
    width: 6;
    color: transparent;
    opacity: 0;
    casing-width: 7;
    casing-color: #47D608;
    casing-opacity: 0.7;
    z-index: -5;
}

/* QC Styles */


/* User specific styles */


*[osm_user_name() == "G_Fyyar"][setting("user_andrewp")] {
  set .andrewp;
}

*[osm_user_name() == "Plutocrats"][setting("user_andrews")] {
  set .andrews;
}

*[osm_user_name() == "Inigo_Maptoya"][setting("user_angie")] {
  set .angie;
}

*[osm_user_name() == "natureandchill"][setting("user_anita")] {
  set .anita;
}

*[osm_user_name() == "Ajaie"][setting("user_anja")] {
  set .anja;
}

*[osm_user_name() == "camapsta"][setting("user_callista")] {
  set .callista;
}

*[osm_user_name() == "Co2013"][setting("user_christian")] {
  set .christian;
}

*[osm_user_name() == "The_Intern"][setting("user_daniel")] {
  set .daniel;
}

*[osm_user_name() == "FarieBerrie"][setting("user_farris")] {
  set .farris;
}

*[osm_user_name() == "spititout"][setting("user_johnny")] {
  set .johnny;
}

*[osm_user_name() == "Szekha"][setting("user_joseph")] {
  set .joseph;
}

*[osm_user_name() == "127logs"][setting("user_logan")] {
  set .logan;
}

*[osm_user_name() == "medrano93"][setting("user_luis")] {
  set .luis;
}

*[osm_user_name() == "MTG5093"][setting("user_marshall")] {
  set .marshall;
}

*[osm_user_name() == "nickmettauer"][setting("user_nickm")] {
  set .nickm;
}

*[osm_user_name() == "mr_et"][setting("user_rd")] {
  set .rd;
}

*[osm_user_name() == "AlwaysSunnyInMapadelphia"][setting("user_riley")] {
  set .riley;
}

*[osm_user_name() == "Bravesfan"][setting("user_robert")] {
  set .robert;
}

*[osm_user_name() == "rytheking"][setting("user_ryanf")] {
  set .ryanf;
}

*[osm_user_name() == "rytheking2"][setting("user_ryanf2")] {
  set .ryanf2;
}

*[osm_user_name() == "BobGod"][setting("user_sage")] {
  set .sage;
}

*[osm_user_name() == "swells5"][setting("user_sarena")] {
  set .sarena;
}

*[osm_user_name() == "Sherbare"][setting("user_SherryM")] {
  set .SherryM;
}

*[osm_user_name() == "sierrae-kaart"][setting("user_sierra")] {
  set .sierra;
}

*[osm_user_name() == "3636pacers"][setting("user_tanner")] {
  set .tanner;
}

/* This is how you search for someone with a space in their name

*[osm_user_name() == "\"Hector Vector\""] {
  set .jman;
}

*/

/* Styling of ways and nodes once they belong to "history" for each individual user */

way.andrewp,
way.andrews,
way.angie,
way.anita,
way.anja,
way.callista,
way.christian,
way.daniel,
way.farris,
way.johnny,
way.joseph,
way.logan,
way.luis,
way.marshall,
way.nickm,
way.rd,
way.riley,
way.robert,
way.ryanf,
way.ryanf2,
way.sage,
way.sarena,
way.SherryM,
way.sierra,
way.tanner{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 7;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */


}




node.andrewp,
node.andrews,
node.angie,
node.anita,
node.anja,
node.callista,
node.christian,
node.daniel,
node.farris,
node.johnny,
node.joseph,
node.logan,
node.luis,
node.marshall,
node.nickm,
node.rd,
node.riley,
node.robert,
node.ryanf,
node.ryanf2,
node.sage,
node.sarena,
node.SherryM,
node.sierra,
node.tanner {
  symbol-size: 15;
  symbol-shape: triangle;
  symbol-stroke-color: blue;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}

  node:selected::selected_layer {
    symbol-shape: circle;
    symbol-size: 22;
    symbol-stroke-color: #DF2E08;
    symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}
